#version 330 core
struct Material {
    sampler2D texture_diffuse1;
    sampler2D texture_specular1;
    float shininess;
};
/* Note: because we now use a material struct again you want to change your
mesh class to bind all the textures using material.texture_diffuseN instead of
texture_diffuseN. */

struct PointLight {
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    vec3 color;
};

#define NR_POINT_LIGHTS 4

in vec3 fragPosition;
in vec3 Normal;
in vec2 TexCoords;
in float fDepth;

layout(location=0) out vec4 color;
layout(location=1) out vec4 vDoF;
//out vec4 finalColor;

uniform vec3 viewPos;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform float PointLight_Count;
uniform Material material;
uniform float useHDR;

// camera setting (m)
uniform float focalLen;
uniform float Dlens;
uniform float focusDis;

uniform float mousePosPixX;
uniform float mousePosPixY;

uniform vec3 mat_ambient;
uniform vec3 mat_diffuse;
uniform vec3 mat_specular;

float maxCoC = 0.024;
float scale = 10; // used to adjust the depth to real world length
float sceneRange = 99;
float snesorHeight = 0.024f;

// Function prototypes
vec3 CalcPointLight(PointLight light, Material mat, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 toneMapping(vec3 color);
void main()
{

    //=============== CoC =======================//

    //float pixCoC = abs(Dlens * focalLen * (focusDis - fDepth/scale) / (focusDis * (fDepth/scale - focalLen)));
    float pixCoC = abs(Dlens * focalLen * (fDepth/scale - focusDis) / (fDepth/scale * (focusDis - focalLen))); // assume 1 pixel is one cm;
    //float blur = clamp(pixCoC * scale/ maxCoC , 0.0, 1.0);

	// put Coc into a % of the image sensor height
	float percentOfSensor = pixCoC/snesorHeight;

	//artificially clam % between 0 and max CoC
	float  blur = clamp(percentOfSensor,0.0f,maxCoC);

	vDoF = vec4(fDepth /sceneRange , blur, 0.0, 0.0);

    //================= color ===================/
    vec3 result = vec3(0.0,0.0,0.0);
    vec3 viewDir = normalize(viewPos - fragPosition);
    vec3 norm = normalize(Normal);

    for(int i = 0; i < PointLight_Count; i++)
        result += CalcPointLight(pointLights[i], material, norm, fragPosition, viewDir);


    if (useHDR == 1)
        result = toneMapping(result);
    color = vec4(result, blur);
    //color = texture(material.texture_diffuse1, TexCoords);
    //color = vec4(Normal, 0.0f);
}

vec3 toneMapping(vec3 color)
{
    const float gamma = 1.0f;
    vec3 hdrColor = color;

    // Reinhard tone mapping
    vec3 mapped = hdrColor / (hdrColor + vec3(1.0));
    // Gamma correction
    mapped = pow(mapped, vec3(1.0 / gamma));

    return mapped;
}

// Calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, Material mat, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);

    // Diffuse shading
    //vec3 normal = normalize(Normal);
    float diff = max(dot(normal, lightDir), 0.0);

    // Specular shading
    float roughnessValue = 0.3;  // 0:smooth ; 1:rough
    float fresnel = 0.8;  // fresnel reflectance at normal incidence
    float spec = 0.0;
    float VdotN = max(dot(viewDir, normal), 0.0);
    float LdotN = max(dot(lightDir, normal), 0.0);

    if(LdotN > 0.0 && VdotN > 0.0){
        // intermediary vector
        vec3 halfVector = normalize(lightDir + viewDir);
        vec3 normal = normalize(Normal);
        vec3 viewDir = normalize(viewPos - fragPos);
        // vec3 lightDir = normalize(lightPos - fragPos);
        float NdotH = max(dot(normal, halfVector), 0.0);
        float VdotH = max(dot(viewDir, halfVector), 0.00001);
        float LdotH = max(dot(lightDir, halfVector), 0.00001);
        float mSquared = roughnessValue * roughnessValue;

        // geometric term
        float G1 = (2.0 * NdotH * VdotN) / VdotH;
        float G2 = (2.0 * NdotH * LdotH);
        float G = min(1.0, min(G1, G2));

        // roughness term (Beckmann distribution)
        float R1 = 1.0 / (3.142 * mSquared * pow(NdotH, 4.0));
        float R2 = (NdotH * NdotH - 1.0) / (mSquared * NdotH * NdotH);
        float R = R1 * exp(R2);

        // fresnel term (use Schlick approximate)
        float F = pow(1.0 - VdotH, 5.0);
        F *= (1.0 - fresnel);
        F += fresnel;

        spec = G * R * F / (max(VdotN * LdotN, 0.00001) * 3.142);
    }

    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // Combine results
    vec3 thisTexture = vec3(texture(mat.texture_diffuse1, TexCoords));
    if (thisTexture == vec3(0.0f))
        thisTexture = vec3(1.0f);
    vec3 ambient = light.ambient * mat_ambient * thisTexture;
    vec3 diffuse = light.diffuse * mat_diffuse * thisTexture;
    vec3 specular = light.specular * mat_specular * spec * thisTexture;

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return light.color * (ambient + LdotN * (diffuse + specular));
    float diffValue = 0.2;
    //return attenuation * LdotN * (diff + (1-diff) * specular ) + attenuation * ambient;
    //return (ambient + diffuse);
}
