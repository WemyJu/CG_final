#version 330

in vec2 TexCoords;
out vec4 color;

uniform vec2 offsetData[13];

uniform sampler2D screenTexture;
uniform sampler2D depthBlurTexture;

uniform float cocView;


const int NUM_DOF_TAPS = 12;
const int maxCoC = 10;
const float dx = 0.5f/600.0f;
const float dy = 0.5f/800.0f;

// these are used to tuned the "pixel-bleeding" fix
const float bleedingBias = 0.02f;
const float bleedingMul = 30.0f;

void main()
{
    vec4 centerColor = texture(screenTexture, TexCoords);
    float totalContribution = 1.0f;
    vec4 centerDepthBlur = texture(depthBlurTexture, TexCoords);
/*
    float sizeCoC = centerDepthBlur.y * maxCoC;
    for(int i=0; i<NUM_DOF_TAPS; i++){
        vec2 tapCoord = TexCoords + filterTaps[i] * sizeCoC;
        vec4 tapColor = texture(screenTexture, tapCoord);
        vec4 tapDepthBlur = texture(depthBlurTexture, tapCoord);
        float tapContribution = (tapDepthBlur.x > centerDepthBlur.x) ? 1.0f : tapDepthBlur.y;
        colorSum += tapColor * tapContribution;
        totalContribution += tapContribution;
    }
    color = colorSum / totalContribution;
	*/

	// for finding the weighted average
	vec4 colorSum = centerColor;
	float totalWeight = 1.0f;

	// for each sampler
	for(int i =0 ; i < 13 ; i++){
		vec2 offset = offsetData[i];

		// calculate the coordinates for this sampler
		vec2 sampleCoords = TexCoords + offset * centerColor.a;

		// do the texture sampling for this sample
		vec4 samplePixel = texture(screenTexture, sampleCoords);
		vec4 sampleDepthBlur = texture(depthBlurTexture, sampleCoords);

		//===========================================================================
		// Prevent focused foreground objects from bleeding onto blurry backgrounds
		// but allow focused backgrounf objects to bleed onto blurry foregrounds
		//===========================================================================
		float weight = samplePixel.a * bleedingMul ;
		weight = sampleDepthBlur.x < centerDepthBlur.x ? weight :((centerColor.a < samplePixel.a + bleedingBias) ? weight : 0.0f);
		weight = clamp( weight, 0.0, 1.0 );
		//===========================================================================

		// add this sample to the wighted average
		colorSum = colorSum  + samplePixel * weight;
		totalWeight = totalWeight + weight;

	}

	if(cocView == 1.0f)
		color = vec4(centerDepthBlur.y/0.024,centerDepthBlur.y/0.024,centerDepthBlur.y/0.024,0.0);
	else
		color = colorSum / totalWeight;

	//color = colorSum / totalWeight;
	//color = centerDepthBlur;
	//color = vec4(centerDepthBlur.x,centerDepthBlur.x,centerDepthBlur.x,0.0);
	//color = vec4(centerDepthBlur.y,centerDepthBlur.y,centerDepthBlur.y,0.0);
	//color = vec4(1.0 ,1.0,1.0,0.0);
	//color = centerColor;
}
