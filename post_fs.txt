#version 330

in vec2 TexCoords;
out vec4 color;

uniform sampler2D screenTexture;
uniform sampler2D depthBlurTexture;

const int NUM_DOF_TAPS = 12;
const int maxCoC = 10;
const float dx = 0.5f/600.0f;
const float dy = 0.5f/800.0f;

const vec2 filterTaps[NUM_DOF_TAPS] = vec2[](
        vec2(-0.326212f*dx,     -0.40581f*dy),
        vec2(-0.840144*dx,      -0.07358f*dy),
        vec2(-0.695914f*dx,     0.457137f*dy),
        vec2(-0.203345f*dx,     0.620716f*dy),
        vec2(0.96234f*dx,       -0.194983f*dy),
        vec2(0.473434f*dx,      -0.480026f*dy),
        vec2(0.519456f*dx,      0.767022f*dy),
        vec2(0.185461f*dx,      -0.893124f*dy),
        vec2(0.507431f*dx,      0.064425f*dy),
        vec2(0.89642f*dx,       0.41248f*dy),
        vec2(-0.32194f*dx,      -0.932615*dy),
        vec2(-0.791559f*dx,     -0.59771f*dy)
      );

void main()
{
    vec4 colorSum = texture2D(screenTexture, TexCoords);
    float totalContribution = 1.0f;
    vec4 centerDepthBlur = texture(depthBlurTexture, TexCoords);

    float sizeCoC = centerDepthBlur.y * maxCoC;
    for(int i=0; i<NUM_DOF_TAPS; i++){
        vec2 tapCoord = TexCoords + filterTaps[i] * sizeCoC;
        vec4 tapColor = texture(screenTexture, tapCoord);
        vec4 tapDepthBlur = texture(depthBlurTexture, tapCoord);
        float tapContribution = (tapDepthBlur.x > centerDepthBlur.x) ? 1.0f : tapDepthBlur.y;
        colorSum += tapColor * tapContribution;
        totalContribution += tapContribution;
    }
    color = colorSum / totalContribution;
}
